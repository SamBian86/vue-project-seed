{
  "page代码片段_drawer_children_form_子组件代码": {
    "prefix": "sp_page_drawer_children_form",
    "body": [
      "<template>\r",
      "  <el-row :gutter=\"10\">\r",
      "    <el-col\r",
      "      :span=\"formConfig.formSpan\"\r",
      "      :lg=\"formConfig.formSpan\"\r",
      "      :md=\"formConfig.formSpan\"\r",
      "      :sm=\"24\"\r",
      "      :xs=\"24\"\r",
      "    >\r",
      "      <div\r",
      "        v-if=\"formGenerateTitle[$$attrs.page_info.data.pageType] !== ''\"\r",
      "        class=\"form-title\"\r",
      "      >{{ formGenerateTitle[$$attrs.page_info.data.pageType] }}</div>\r",
      "      <yunlin-form\r",
      "        ref=\"yunlinForm\"\r",
      "        :config=\"formConfig\"\r",
      "        :handle=\"formHandle\"\r",
      "        :data=\"formData\"\r",
      "        :rules=\"formRules\"\r",
      "        v-bind=\"$$attrs\"\r",
      "        @form-data-merge=\"formDataMerge\"\r",
      "        @form-generate-rule-by-props=\"formGenerateRuleByProps\"\r",
      "        @form-value-listener=\"formValueListener\"\r",
      "        @form-data-update=\"formDataUpdate\"\r",
      "        @form-reset-config-item=\"formResetConfigItem\"\r",
      "        v-on=\"$$listeners\"\r",
      "      >\r",
      "        <template slot=\"footer\">\r",
      "          <div class=\"form-submit-container\">\r",
      "            <el-button\r",
      "              v-if=\"containsPageType(['create', 'edit', 'detail'])\"\r",
      "              :size=\"formConfig.formSize\"\r",
      "              @click.stop=\"cancleHandle\"\r",
      "            >\r",
      "              {{ $$t('back') }}\r",
      "            </el-button>\r",
      "            <el-button\r",
      "              v-if=\"containsPageType(['create']) && filterPermission('xxx:xxx:save')\"\r",
      "              type=\"primary\"\r",
      "              :size=\"formConfig.formSize\"\r",
      "              @click.stop=\"submitHandle\"\r",
      "            >\r",
      "              {{ $$t('confirm') }}\r",
      "            </el-button>\r",
      "            <el-button\r",
      "              v-if=\"containsPageType(['edit']) && filterPermission('xxx:xxx:update')\"\r",
      "              type=\"primary\"\r",
      "              :size=\"formConfig.formSize\"\r",
      "              @click.stop=\"submitHandle\"\r",
      "            >\r",
      "              {{ $$t('update') }}\r",
      "            </el-button>\r",
      "          </div>\r",
      "        </template>\r",
      "      </yunlin-form>\r",
      "    </el-col>\r",
      "  </el-row>\r",
      "</template>\r",
      "\r",
      "<script>\r",
      "import { mapGetters } from 'vuex'\r",
      "import commonMixin from '@/mixins/common-mixin'\r",
      "import pageMixin from '@/mixins/page-mixin'\r",
      "import formDefaultMixin from '@/mixins/form-default-mixin'\r",
      "import drawerMixin from '@/mixins/drawer-mixin'\r",
      "// import { createXXX, editXXX, getXXXById } from '@/api/XXX'\r",
      "\r",
      "export default {\r",
      "  name: 'Form',\r",
      "  components: {},\r",
      "  mixins: [commonMixin, pageMixin, formDefaultMixin, drawerMixin],\r",
      "  data() {\r",
      "    return {\r",
      "      // 定义表单名称\r",
      "      formTitle: {\r",
      "        create: this.$$t('add'),\r",
      "        edit: this.$$t('edit'),\r",
      "        detail: this.$$t('detail')\r",
      "      },\r",
      "      formGenerateTitle: {},\r",
      "      formHandle: {\r",
      "        // 创建抽象方法，用创建接口方法覆盖\r",
      "        create: {\r",
      "          // api: createXXX\r",
      "        },\r",
      "        // 修改抽象方法，用修改接口方法覆盖\r",
      "        edit: {\r",
      "          // api: editXXX,\r",
      "          // callback: this.XXXCallback\r",
      "        },\r",
      "        // 详情抽象方法，用详情接口方法覆盖\r",
      "        detail: {\r",
      "          // api: getXXXById\r",
      "        }\r",
      "      },\r",
      "      // 初始化数据定义\r",
      "      formDefaultData: {},\r",
      "      // 用于处理表单的隐藏与显示禁用行为\r",
      "      formAction: []\r",
      "    }\r",
      "  },\r",
      "  computed: {\r",
      "    ...mapGetters('app', ['filterPermission'])\r",
      "  },\r",
      "  activated() {\r",
      "    // console.log('form activated')\r",
      "    this.init()\r",
      "  },\r",
      "  created() {\r",
      "    // console.log(this.$$attrs.page_info)\r",
      "    // console.log('form created')\r",
      "\r",
      "    // 设置整体表单栅格列数\r",
      "    this.formConfig.formSpan = 12\r",
      "  },\r",
      "  methods: {\r",
      "    generateTitle() {\r",
      "      const { formTitle } = this\r",
      "      this.formGenerateTitle = formTitle\r",
      "    },\r",
      "    init() {\r",
      "      // 设置表单内容\r",
      "      this.formConfig.formItemsReadOnly = [$1]\r",
      "\r",
      "      // 组装表单初始数据\r",
      "      this.generateFormData()\r",
      "      // 生成标题\r",
      "      this.generateTitle()\r",
      "      // 生成表单及验证规则\r",
      "      this.generateForm()\r",
      "    },\r",
      "    cancleHandle() {\r",
      "      this.$$drawerCloseByChild()\r",
      "    },\r",
      "    XXXCallback() {\r",
      "      this.$$drawerCloseByChild()\r",
      "    }\r",
      "  }\r",
      "}\r",
      "</script>\r",
      ""
    ],
    "description": "page代码片段_drawer_children_form_子组件代码"
  }
}
